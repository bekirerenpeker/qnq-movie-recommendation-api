using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace MovieRecommendation.Dtos.Movie;

public class MovieDetailsDocument : IDocument
{
    private readonly MovieDetailsDto _movieDetailsDto;
    private readonly List<CategoryDto> _categories;

    public MovieDetailsDocument(
        MovieDetailsDto movieDetailsDto, List<CategoryDto> categories
    )
    {
        _movieDetailsDto = movieDetailsDto;
        _categories = categories;
    }

    public DocumentMetadata GetMetadata() => DocumentMetadata.Default;

    public void Compose(IDocumentContainer container)
    {
        container.Page(page =>
        {
            page.Margin(40);
            page.Size(PageSizes.A4);

            // Header with title
            page.Header()
                .AlignCenter()
                .Text(_movieDetailsDto.Title)
                .FontSize(20).Bold();

            // Main content
            page.Content().PaddingVertical(10).Column(col =>
            {
                col.Spacing(10);

                // Movie details
                col.Item().Text($"Description: {_movieDetailsDto.Description ?? "N/A"}");
                col.Item().Text($"Average Rating: {_movieDetailsDto.AverageRating}");
                col.Item().Text($"Duration: {_movieDetailsDto.DurationMins} mins");
                col.Item().Text($"Release Year: {_movieDetailsDto.ReleaseYear?.ToString() ?? "N/A"}");

                // Categories
                if (_categories.Count > 0)
                {
                    col.Item().Text("Categories:").Bold();
                    foreach (var category in _categories)
                    {
                        col.Item().Row(row =>
                        {
                            row.AutoItem().Text("â€¢ ");
                            row.RelativeItem().Text(category.Name);
                        });
                    }
                }

                // Reviews section
                if (_movieDetailsDto.ReviewIds.Count > 0)
                {
                    col.Item().Text("Reviews:").Bold();

                    col.Item().Table(table =>
                    {
                        // Columns
                        table.ColumnsDefinition(cols =>
                        {
                            cols.RelativeColumn(2); // User
                            cols.RelativeColumn(1); // Rating
                            cols.RelativeColumn(3); // Comment
                        });

                        // Header row
                        table.Header(header =>
                        {
                            header.Cell().Text("User").Bold();
                            header.Cell().Text("Rating").Bold();
                            header.Cell().Text("Comment").Bold();
                        });

                        // Data rows
                        /*
                        foreach (var r in _reviews)
                        {
                            var reviewDto = await _reviewService.GetReviewByIdAsync();
                            table.Cell().Text(r.User);
                            table.Cell().Text(r.Rating.ToString());
                            table.Cell().Text(r.Comment ?? "");
                        }
                        */
                    });
                }

                // Pagination info
                if (_movieDetailsDto.Paginate != null)
                {
                    col.Item().AlignRight().Text(
                        $"Page {_movieDetailsDto.Paginate.Page}, showing {_movieDetailsDto.Paginate.Count} reviews per page"
                    ).Italic();
                }
            });

            page.Footer()
                .AlignCenter()
                .Text("Generated By MovieRecommendationAPI");
        });
    }
}